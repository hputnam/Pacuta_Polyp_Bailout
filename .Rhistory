aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y ~ x,
parse = TRUE,
label.x.npc = "left", label.y.npc = 0.95,
size = 5,
color = "black"
)
labs(
title = "Linear Regression: P_pH_3 vs P_pH_1",
x = "P_pH_3",
y = "P_pH_1"
) +
theme_minimal()
#P_pH_1 = Reference probe
#correct the probe for the relationship (y=mx+b) with the reference probe
Apex.Data.apex$P_pH_3_Corr <- coeffs[1]+(coeffs[2]*Apex.Data.apex$P_pH_3)
Apex.Data.apex$test_pH_3 <- Apex.Data.apex$P_pH_3_Corr - Apex.Data.apex$P_pH_1
mean(Apex.Data.apex$test_pH_3)
ggplot(Apex.Data.apex, aes(x = P_pH_1, y = P_pH_3_Corr)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
#annotate("text", x = 2, y = 60, label = eq_label, hjust = 0, size = 5)+
labs(
title = "Linear Regression: P_pH_1 vs P_pH_3_Corr",
x = "P_pH_1",
y = "P_pH_3_Corr"
) +
theme_minimal()
#Make Final Data Set
Apex.Final <- Apex.Data.apex %>%
select(date, P_Cond_1, P_Cond_2_Corr, P_Cond_3_Corr, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2_Corr, P_pH_3_Corr)
#rename columns
colnames(Apex.Final) <- c("date", "P_Cond_1", "P_Cond_2", "P_Cond_3", "P_Tmp_1", "P_Tmp_2", "P_Tmp_3", "P_pH_1", "P_pH_2", "P_pH_3")
# Convert conductivity (mS/cm) to salinity (ppt) using a simple empirical formula
Apex.Final <- Apex.Final %>%
mutate(
Sal_1 = P_Cond_1 * 0.6604,
Sal_2 = P_Cond_2 * 0.6604,
Sal_3 = P_Cond_3 * 0.6604
)
Apex.Final <- Apex.Final %>%
select(date, Sal_1, Sal_2, Sal_3, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2, P_pH_3)
apex_pull_date <- "20250719"
write.csv(Apex.Final, paste0("Data/",apex_pull_date,"_","Apex.Final.csv")) #write file to save data
# Ensure time is numeric and data is clean
Apex.Final_Sal <- Apex.Final %>%
mutate(Time_Hours = as.numeric(difftime(date, min(date), units = "hours"))) %>%
select(date, Time_Hours, Sal_1, Sal_2, Sal_3)
# Reshape data to long format
Sal_long <- Apex.Final %>%
pivot_longer(cols = starts_with("Sal_"), names_to = "Probe", values_to = "Salinity")
# Run linear regression for each probe vs Time_Hours and extract slope
Sal_slopes <- Sal_long %>%
group_by(Probe) %>%
do({
model <- lm(Salinity ~ Time_Hours, data = .)
data.frame(Slope = coef(model)[["Time_Hours"]])
})
View(Apex.Final)
#Make Final Data Set
Apex.Final <- Apex.Data.apex %>%
select(date, P_Cond_1, P_Cond_2_Corr, P_Cond_3_Corr, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2_Corr, P_pH_3_Corr)
#rename columns
colnames(Apex.Final) <- c("date", "P_Cond_1", "P_Cond_2", "P_Cond_3", "P_Tmp_1", "P_Tmp_2", "P_Tmp_3", "P_pH_1", "P_pH_2", "P_pH_3")
# Convert conductivity (mS/cm) to salinity (ppt) using a simple empirical formula
Apex.Final_Sal <- Apex.Final %>%
mutate(
Sal_1 = P_Cond_1 * 0.6604,
Sal_2 = P_Cond_2 * 0.6604,
Sal_3 = P_Cond_3 * 0.6604
)
Apex.Final_Sal <- Apex.Final %>%
select(date, Sal_1, Sal_2, Sal_3, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2, P_pH_3)
View(Apex.Final)
View(Apex.Final_Sal)
#Make Final Data Set
Apex.Final <- Apex.Data.apex %>%
select(date, P_Cond_1, P_Cond_2_Corr, P_Cond_3_Corr, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2_Corr, P_pH_3_Corr)
#rename columns
colnames(Apex.Final) <- c("date", "P_Cond_1", "P_Cond_2", "P_Cond_3", "P_Tmp_1", "P_Tmp_2", "P_Tmp_3", "P_pH_1", "P_pH_2", "P_pH_3")
# Convert conductivity (mS/cm) to salinity (ppt) using a simple empirical formula
Apex.Final <- Apex.Final %>%
mutate(
Sal_1 = P_Cond_1 * 0.6604,
Sal_2 = P_Cond_2 * 0.6604,
Sal_3 = P_Cond_3 * 0.6604
)
Apex.Final_Sal <- Apex.Final %>%
select(date, Sal_1, Sal_2, Sal_3, P_Tmp_1, P_Tmp_2, P_Tmp_3, P_pH_1, P_pH_2, P_pH_3)
apex_pull_date <- "20250719"
write.csv(Apex.Final, paste0("Data/",apex_pull_date,"_","Apex.Final.csv")) #write file to save data
View(Apex.Final)
View(Apex.Final_Sal)
# Ensure time is numeric and data is clean
Apex.Final_Sal <- Apex.Final %>%
mutate(Time_Hours = as.numeric(difftime(date, min(date), units = "hours"))) %>%
select(date, Time_Hours, Sal_1, Sal_2, Sal_3)
# Reshape data to long format
Sal_long <- Apex.Final %>%
pivot_longer(cols = starts_with("Sal_"), names_to = "Probe", values_to = "Salinity")
# Run linear regression for each probe vs Time_Hours and extract slope
Sal_slopes <- Sal_long %>%
group_by(Probe) %>%
do({
model <- lm(Salinity ~ Time_Hours, data = .)
data.frame(Slope = coef(model)[["Time_Hours"]])
})
View(Sal_long)
# Ensure time is numeric and data is clean
Apex.Final_Sal <- Apex.Final %>%
mutate(Time_Hours = as.numeric(difftime(date, min(date), units = "hours"))) %>%
select(date, Time_Hours, Sal_1, Sal_2, Sal_3)
# Reshape data to long format
Sal_long <- Apex.Final_Sal %>%
pivot_longer(cols = starts_with("Sal_"), names_to = "Probe", values_to = "Salinity")
# Run linear regression for each probe vs Time_Hours and extract slope
Sal_slopes <- Sal_long %>%
group_by(Probe) %>%
do({
model <- lm(Salinity ~ Time_Hours, data = .)
data.frame(Slope = coef(model)[["Time_Hours"]])
})
# Print the slopes
print(Sal_slopes)
# Plot: Conductivity over Time by Probe
ggplot(Sal_long, aes(x = Time_Hours, y = Salinity, color = Probe)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Salinity over Time by Probe",
x = "Time (hours since start)",
y = "Salinity") +
theme_minimal()
View(Apex.Final_Sal)
View(Apex.Final)
View(Apex.Final_Sal)
View(Apex.Data.apex)
str(Apex.Data.apex)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# View result
head(subset_cond_probes)
View(subset_combined)
View(subset_cond_probes)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Run linear regressions for each probe
lm_cond1 <- lm(P_Cond_1 ~ Standard, data = subset_cond_probes)
lm_cond2 <- lm(P_Cond_2 ~ Standard, data = subset_cond_probes)
lm_cond3 <- lm(P_Cond_3 ~ Standard, data = subset_cond_probes)
extract_model_info <- function(model) {
coefs <- coef(model)
r2 <- summary(model)$r.squared
paste0("y = ", round(coefs[2], 4), "x + ", round(coefs[1], 4),
" | RÂ² = ", round(r2, 4))
}
# Apply to each model
extract_model_info(lm_cond1)
extract_model_info(lm_cond2)
extract_model_info(lm_cond3)
library("XML")
library("plyr")
library("lubridate")
library("dplyr")
library("tidyverse")
library("ggpmisc")
apex.xmlfile <- xmlParse("http://10.10.204.74/cgi-bin/datalog.xml?sdate=250721&days=1") #read in the date (e.g. 180620) plus # days (e.g. days=4) of Apex data
Apex.Data <- ldply(xmlToList(apex.xmlfile), data.frame) #convert xml to dataframe
#List of probe names from the Apex and the columns they are located in from the xml file
#Tmp_1 = probe.value
#Cond_1 = probe.value.1
#pH_1 = probe.value.4
#Tmp_2 = probe.value.2
#Cond_2 = probe.value.3
#pH_2 = probe.value.5
#Tmp_3 = probe.value.7
#Cond_3 = probe.Value.8
#pH_3 = probe.value.6
#select columns of interest by name from df
Apex.Data.apex <- Apex.Data %>%
select(c(date, probe.value, probe.value.1, probe.value.4, probe.value.2, probe.value.3, probe.value.5, probe.value.7, probe.value.8, probe.value.6))
#rename columns
colnames(Apex.Data.apex) <- c("date", "P_Tmp_1", "P_Cond_1", "P_pH_1", "P_Tmp_2", "P_Cond_2", "P_pH_2", "P_Tmp_3", "P_Cond_3", "P_pH_3")
#Check Current system time zone and time
current_tz <- Sys.timezone()
print(current_tz)
# Set to correct timezone, time and correct date
#Sys.setenv(TZ = "UTC03:00")
# correct_date <- Sys.Date()
# print(correct_date)
date <- Sys.Date() #set todays date
# time <- Sys.time()
# time <- gsub(":" ,"_",time)
# time <- gsub(" " ,"_",time)
# today <- sub('..', '', date)
# today <- gsub('-', '', today)
# today <- as.numeric(today)
#
Apex.Data.apex <- na.omit(Apex.Data.apex)
#view dataframe attribues
str(Apex.Data.apex)
#convert date time to POSIXct datetime and probe data to numeric
Apex.Data.apex <- Apex.Data.apex %>%
mutate(date = as.POSIXct(date, format = "%m/%d/%Y %H:%M:%S")) %>%
mutate(across(starts_with("P_"), ~ as.numeric(.)))
#view dataframe attribues
str(Apex.Data.apex)
#take the probe data columns and rearrange them into long format, with a column named probe and the numeric data in a column named value
Apex.Data_long <- Apex.Data.apex %>%
pivot_longer(cols = starts_with("P_"),
names_to = "probe",
values_to = "value")
Apex.Data_long$Type <-Apex.Data_long$probe
Apex.Data_long$Type <- gsub("P_" ,"", Apex.Data_long$Type)
Apex.Data_long$Type <- gsub("_1" ,"", Apex.Data_long$Type)
Apex.Data_long$Type <- gsub("_2" ,"", Apex.Data_long$Type)
Apex.Data_long$Type <- gsub("_3" ,"", Apex.Data_long$Type)
str(Apex.Data_long)
unique(Apex.Data_long$probe)
unique(Apex.Data_long$Type)
#plot data
apex.data <- ggplot(Apex.Data_long, aes(x = date, y = value, color=probe), group = Type) +
geom_point() +
labs(x = "Time",
y = "Value",
color = "Type") +
facet_wrap("Type", scales = "free")+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
apex.data
ggsave("Outputs/apex_probes_.pdf", plot=apex.data, height=6, width=8)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Run linear regressions for each probe
lm_cond1 <- lm(P_Cond_1 ~ Standard, data = subset_cond_probes)
lm_cond2 <- lm(P_Cond_2 ~ Standard, data = subset_cond_probes)
lm_cond3 <- lm(P_Cond_3 ~ Standard, data = subset_cond_probes)
extract_model_info <- function(model) {
coefs <- coef(model)
r2 <- summary(model)$r.squared
paste0("y = ", round(coefs[2], 4), "x + ", round(coefs[1], 4),
" | RÂ² = ", round(r2, 4))
}
# Apply to each model
extract_model_info(lm_cond1)
extract_model_info(lm_cond2)
extract_model_info(lm_cond3)
View(Apex.Data.apex)
View(subset_cond_probes)
extract_model_info
# Apply to each model
extract_model_info(lm_cond1)
coef(lm_cond1)
coef(lm_cond1)[1]
extract_model_info(lm_cond1)
subset_cond_probes$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*subset_cond_probes$P_Cond_1)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
# Run linear regressions for each probe
lm_cond1 <- lm(Standard ~ P_Cond_1, data = subset_cond_probes)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
subset_cond_probes$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*subset_cond_probes$P_Cond_1)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
plot(subset_cond_probes$P_Cond_1_Corr,subset_cond_probes$Standard)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
plot(subset_cond_probes$P_Cond_1_Corr,subset_cond_probes$Standard)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Run linear regressions for each probe
lm_cond1 <- lm(Standard ~ P_Cond_1, data = subset_cond_probes)
lm_cond2 <- lm(Standard ~ P_Cond_2, data = subset_cond_probes)
lm_cond3 <- lm(Standard ~ P_Cond_3, data = subset_cond_probes)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
subset_cond_probes$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*subset_cond_probes$P_Cond_1)
subset_cond_probes$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*subset_cond_probes$P_Cond_2)
subset_cond_probes$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*subset_cond_probes$P_Cond_3)
# Running Apex.Data.apex through the LM equations
Apex.Data.apex$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*Apex.Data.apex$P_Cond_1)
# Running Apex.Data.apex through the LM equations
Apex.Data.apex$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*Apex.Data.apex$P_Cond_1)
Apex.Data.apex$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*Apex.Data.apex$P_Cond_2)
Apex.Data.apex$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*Apex.Data.apex$P_Cond_3)
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Run linear regressions for each probe
lm_cond1 <- lm(Standard ~ P_Cond_1, data = subset_cond_probes)
lm_cond2 <- lm(Standard ~ P_Cond_2, data = subset_cond_probes)
lm_cond3 <- lm(Standard ~ P_Cond_3, data = subset_cond_probes)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
subset_cond_probes$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*subset_cond_probes$P_Cond_1)
subset_cond_probes$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*subset_cond_probes$P_Cond_2)
subset_cond_probes$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*subset_cond_probes$P_Cond_3)
# Running Apex.Data.apex through the LM equations
Apex.Data.apex$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*Apex.Data.apex$P_Cond_1)
Apex.Data.apex$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*Apex.Data.apex$P_Cond_2)
Apex.Data.apex$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*Apex.Data.apex$P_Cond_3)
# Fit regressions to match P_Cond_2_Corr and P_Cond_3_Corr to P_Cond_1_Corr
Ref_corr_2 <- lm(P_Cond_1_Corr ~ P_Cond_2_Corr, data = subset_cond_probes)
Ref_corr_3 <- lm(P_Cond_1_Corr ~ P_Cond_3_Corr, data = subset_cond_probes)
# Extract coefficients
coef_corr_2 <- coef(Ref_corr_2)
coef_corr_3 <- coef(Ref_corr_3)
# Manually correct P_Cond_2_Corr and P_Cond_3_Corr to match P_Cond_1_Corr scale
Apex.Data.apex$P_Cond_2_Corr2 <- coef_corr_2[1] + coef_corr_2[2] * Apex.Data.apex$P_Cond_2_Corr
Apex.Data.apex$P_Cond_3_Corr2 <- coef_corr_3[1] + coef_corr_3[2] * Apex.Data.apex$P_Cond_3_Corr
# Define time intervals
start1 <- as.POSIXct("2025-07-21 09:14:00")
end1   <- as.POSIXct("2025-07-21 10:35:00")
start2 <- as.POSIXct("2025-07-21 10:53:00")
end2   <- as.POSIXct("2025-07-21 11:09:00")
start3 <- as.POSIXct("2025-07-21 11:11:00")
end3   <- as.POSIXct("2025-07-21 11:28:00")
# Subset for each time range
subset1 <- Apex.Data.apex %>%
filter(date >= start1 & date <= end1)
subset2 <- Apex.Data.apex %>%
filter(date >= start2 & date <= end2)
subset3 <- Apex.Data.apex %>%
filter(date >= start3 & date <= end3)
# Combine the subsets
subset_combined <- bind_rows(subset1, subset2, subset3)
# Select relevant columns
subset_cond_probes <- subset_combined %>%
select(date, P_Cond_1, P_Cond_2, P_Cond_3)
# Add standard values based on the time intervals
subset_cond_probes <- subset_cond_probes %>%
mutate(Standard = case_when(
date >= start1 & date <= end1 ~ 0,
date >= start2 & date <= end2 ~ 53,
date >= start3 & date <= end3 ~ 80,
TRUE ~ NA_real_
))
# View result
head(subset_cond_probes)
# Run linear regressions for each probe
lm_cond1 <- lm(Standard ~ P_Cond_1, data = subset_cond_probes)
lm_cond2 <- lm(Standard ~ P_Cond_2, data = subset_cond_probes)
lm_cond3 <- lm(Standard ~ P_Cond_3, data = subset_cond_probes)
plot(subset_cond_probes$P_Cond_1,subset_cond_probes$Standard)
subset_cond_probes$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*subset_cond_probes$P_Cond_1)
subset_cond_probes$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*subset_cond_probes$P_Cond_2)
subset_cond_probes$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*subset_cond_probes$P_Cond_3)
# Running Apex.Data.apex through the LM equations
Apex.Data.apex$P_Cond_1_Corr <- coef(lm_cond1)[1]+(coef(lm_cond1)[2]*Apex.Data.apex$P_Cond_1)
Apex.Data.apex$P_Cond_2_Corr <- coef(lm_cond2)[1]+(coef(lm_cond2)[2]*Apex.Data.apex$P_Cond_2)
Apex.Data.apex$P_Cond_3_Corr <- coef(lm_cond3)[1]+(coef(lm_cond3)[2]*Apex.Data.apex$P_Cond_3)
# Fit regressions to match P_Cond_2_Corr and P_Cond_3_Corr to P_Cond_1_Corr
Ref_corr_2 <- lm(P_Cond_1_Corr ~ P_Cond_2_Corr, data = subset_cond_probes)
Ref_corr_3 <- lm(P_Cond_1_Corr ~ P_Cond_3_Corr, data = subset_cond_probes)
# Extract coefficients
coef_corr_2 <- coef(Ref_corr_2)
coef_corr_3 <- coef(Ref_corr_3)
# Manually correct P_Cond_2_Corr and P_Cond_3_Corr to match P_Cond_1_Corr scale
Apex.Data.apex$P_Cond_2_Corr2 <- coef_corr_2[1] + coef_corr_2[2] * Apex.Data.apex$P_Cond_2_Corr
Apex.Data.apex$P_Cond_3_Corr2 <- coef_corr_3[1] + coef_corr_3[2] * Apex.Data.apex$P_Cond_3_Corr
# Create clean dataset with date and fully corrected conductivity values
Apex.Corrected <- Apex.Data.apex %>%
select(date, P_Cond_1_Corr, P_Cond_2_Corr2, P_Cond_3_Corr2)
View(Apex.Corrected)
