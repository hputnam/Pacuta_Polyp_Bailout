# Load necessary libraries
# (Install them if not already installed using install.packages("tidyverse"))
library(tidyverse)
# Read the CSV file
data <- read.csv("Data/PolypBailoutTEST3.csv", stringsAsFactors = FALSE)
# Combine Date and Time into a single POSIXct datetime
data$DateTime <- as.POSIXct(paste(data$Date, data$Time), format = "%Y%m%d %H:%M")
# Convert datetime to hours since start
data$Time_Hours <- as.numeric(difftime(data$DateTime, min(data$DateTime, na.rm = TRUE), units = "hours"))
# Reshape data to long format
data_long <- data %>%
select(Time_Hours, starts_with("C")) %>%
pivot_longer(cols = starts_with("C"), names_to = "Chamber", values_to = "Salinity")
# Run linear regression for each chamber and extract slopes
slopes <- data_long %>%
group_by(Chamber) %>%
do({
model <- lm(Salinity ~ Time_Hours, data = .)
data.frame(Slope = coef(model)[["Time_Hours"]])
})
# Print the slopes
print(slopes)
# Create scatter plot with regression lines
ggplot(data_long, aes(x = Time_Hours, y = Salinity, color = Chamber)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Salinity over Time by Chamber",
x = "Time (hours since start)",
y = "Salinity (ppt)") +
theme_minimal()
# Print the slopes
print(slopes)
# Load required libraries
library(XML)
library(dplyr)
library(lubridate)
library(ggplot2)
# Parse the XML file
xml_file <- xmlParse("datalog.xml")  # Adjust path if needed
# Parse the XML file
xml_file <- xmlParse("datalog.xml")  # Adjust path if needed
getwd()
# Load required libraries
library(XML)
library(dplyr)
library(lubridate)
library(ggplot2)
# Parse the XML file
xml_file <- xmlParse("C:/Users/Thatcher/OneDrive - University of Rhode Island/Summer Research 2025/Pacuta_Polyp_Bailout/Data/datalog.xml")
# Extract all <record> nodes
records <- getNodeSet(xml_file, "//record")
# Convert each record to a row
data_list <- lapply(records, function(record) {
date_time <- xmlValue(record[["date"]])
# Get the <probe> node
probe_node <- record[["probe"]]
temp_value <- xmlValue(probe_node[["value"]])
data.frame(
DateTime = date_time,
Temperature = as.numeric(temp_value),
stringsAsFactors = FALSE
)
})
# Combine into a single data frame
Apex.Data <- bind_rows(data_list)
# Convert DateTime to POSIXct and split into Date and Time
Apex.Data <- Apex.Data %>%
mutate(
DateTime = mdy_hms(DateTime),
Date = as.Date(DateTime),
Time = format(DateTime, "%H:%M:%S")
) %>%
select(Date, Time, Temperature, DateTime)
# Print the first rows to confirm
print(head(Apex.Data))
# Plot Temperature over DateTime
p <- ggplot(Apex.Data, aes(x = DateTime, y = Temperature)) +
geom_point(color = "blue") +
geom_line(color = "blue") +
labs(
title = "Apex Temperature Over Time",
x = "Date and Time",
y = "Temperature (Â°C)"
) +
theme_minimal()
print(p)
# Save cleaned data to CSV
write.csv(Apex.Data, "apex_temperature_data.csv", row.names = FALSE)
# Save cleaned data to CSV
write.csv(
Apex.Data,
"C:/Users/Thatcher/OneDrive - University of Rhode Island/Summer Research 2025/Pacuta_Polyp_Bailout/Data/apex_temperature_data.csv",
row.names = FALSE
)
# Save cleaned data to CSV
write.csv(
Apex.Data,
"C:/Users/Thatcher/OneDrive - University of Rhode Island/Summer Research 2025/Pacuta_Polyp_Bailout/Data/apex_temperature_data.csv",
row.names = FALSE
)
library("XML")
library("plyr")
library("lubridate")
library("dplyr")
library("tidyverse")
